{"version":3,"sources":["pages/WorkPageDetail/detail.module.scss","pages/App.module.scss","pages/HomePage/home.module.scss","components/WorkLists/work.module.scss","pages/WorkPage/works.module.scss","pages/LifePage/life.module.scss","pages/GamePage/games.module.scss","assets/images/min.JPG","components/WorkLists/index.js","pages/HomePage/index.js","pages/WorkPage/index.js","pages/LifePage/index.js","pages/GamePage/index.js","pages/WorkPageDetail/index.js","pages/App.js","index.js"],"names":["module","exports","dataSource","className","styles","worklist","map","item","to","id","cover","src","alt","workbrief","title","brief","tag","tags","i","wrap","image","work","WorkLists","worksData","data","datas","useParams","box","content","width","align","reference","App","location","useLocation","header","boxleft","boxright","pathname","selected","path","element","HomePage","WorkPage","LifePage","GamePage","WorkPageDetail","footer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f950ca91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"detail_wrap__1yRam\",\"box\":\"detail_box__2tDf6\",\"title\":\"detail_title__31reb\",\"content\":\"detail_content__3pN9U\",\"reference\":\"detail_reference__2C8UW\",\"imagetext\":\"detail_imagetext__2-2gx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2ThaC\",\"content\":\"App_content__CFaDM\",\"header\":\"App_header__1j7dH\",\"selected\":\"App_selected__2MZ-x\",\"box\":\"App_box__35eNc\",\"boxleft\":\"App_boxleft__Y2g6b\",\"boxright\":\"App_boxright__1JsWt\",\"footer\":\"App_footer__2lBzU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"home_wrap__1tGw8\",\"brief\":\"home_brief__8e8w5\",\"work\":\"home_work__CSgme\",\"title\":\"home_title__3_sLh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"worklist\":\"work_worklist__33hAM\",\"cover\":\"work_cover__w6rrs\",\"workbrief\":\"work_workbrief__1Bdy2\",\"tag\":\"work_tag__1soRO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"works_wrap__2fAh4\",\"title\":\"works_title__2VkCp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"life_wrap__19sNG\",\"title\":\"life_title__3NRFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"games_wrap__2H23C\",\"title\":\"games_title__3t6Z8\"};","export default __webpack_public_path__ + \"static/media/min.a0866730.JPG\";","//import React, { Component } from 'react';\nimport styles from './work.module.scss';\nimport { Link } from 'react-router-dom';\n\nexport default ({ dataSource }) =>{\n    return <div className={ styles.worklist }>\n        <ul>\n            {\n                dataSource && dataSource.map(item=>\n                    <li key={item.id}>\n                       <Link to={ `/works/${item.id}` }>\n                            <div className={ styles.cover }>\n                                <img src={ item.cover } alt = 'Oops, disapeared'/>\n                            </div>\n                            <div className={styles.workbrief}>\n                                <h3>{item.title}</h3>\n                                <p>{item.brief}</p>\n                                <div className={styles.tag}>\n                                    { item.tags && item.tags.map(i=><span key={i}>{i}</span>) }\n                                </div>\n                            </div>                       \n                       </Link>\n                    </li>\n                )\n            }\n        </ul>\n    </div>\n}","import styles from './home.module.scss';\n//import React, { Component } from 'react';\nimport image from \"../../assets/images/min.JPG\";\nimport WorkLists from \"../../components/WorkLists\";\nimport worksData from \"../works.json\";\n\nexport default () => {\n    return <div className = {styles.wrap}>\n    \n        {/* Self introduction*/ }\n        <section className = {styles.brief}>\n            <img src={ image } alt= 'Oops, this disappeared..'/>\n            <h2>Yuehao Shi</h2>\n            <ul>\n                <li>software engineer</li>\n                <li>environmental engineer</li>\n            </ul>\n            <p>I am an amature as a software engineer and love learning!</p>\n            <p>I stayed in environmental engineering field for years in the past, and hope to be a connecter between environmtnal engineering and computer science :P</p>\n            <p>Contact me at ashimoon97@gmail.com</p>\n        </section>\n\n        {/* Work List*/ }\n        <section className = {styles.work}>\n            <div className = {styles.title}>\n                <h3>A selection of my work</h3>\n                <p>Welcome to click and review details!</p>\n            </div>\n            <WorkLists dataSource = { worksData.data } />\n        </section>\n    </div>\n}","//import React, { Component } from 'react';\nimport styles from './works.module.scss';\nimport WorkLists from '../../components/WorkLists';\nimport datas from '../works.json';\n\nexport default () =>{\n    return <div className={ styles.wrap }>\n        <div className={ styles.title }>\n            <h3>My Work</h3>\n            <p>A collection of different things I have worked on.</p>\n        </div>\n        <WorkLists dataSource={ datas.data } />\n    </div>\n}","\nimport styles from './life.module.scss';\n\nexport default () =>{\n    return <div className={ styles.wrap }>\n        <div className={ styles.title }>\n            <h3>About Me</h3>\n            <p>A collection of different things I have worked on.</p>\n        </div>\n    </div>\n}","import styles from './games.module.scss';\n\nexport default () =>{\n    return <div className={ styles.wrap }>\n        <div className={ styles.title }>\n            <h3>Have a rest and play some games!</h3>\n            <p>To be updated soon...</p>\n        </div>\n    </div>\n}","//import React, { Component } from 'react';\nimport styles from './detail.module.scss';\nimport { useParams } from \"react-router-dom\";\n\nexport default () =>{\n    let { id } = useParams();\n    if (id == 1) {\n        return <div className={ styles.wrap }>\n        <div className={ styles.box }>\n            <div className={ styles.title }>\n               <h1>Solar Energy Visualization</h1>\n               <p>Sep 2021 to Dec 2021</p>\n            </div>\n            <section className={ styles.content }>\n                <p>\n                This project is to make visualization about solar energy application potential, including explanation of solar energy distribution by solar-earth system model visualization, solar intensity map visualization as well as solar panel installation and usage suggestion for specific locations. The whole project is to be divided into three parts:\n                </p>\n                <p>\n                <b>Part 1. Solar Energy Distribution Explanation</b>\n                </p>\n                <p>\n                The first part is to explain solar energy distribution with a visualization model for solar-earth system. In this part, a model of solar-sun 3D system is going to be constructed to illustrate why solar energy is distributed unevenly on the earth. The idea of solar system simulation model comes from the code developed by Aman Kharwal (Kharwal, 2020). \n                </p>\n                <p>\n                To simulate the solar-earth system, two functions, “spheres” and “orbits” were defined to represent the shape and movement trace of sun and earth with “graph_objects” module in Python Plotly. To better illustrate the visualization effect, the diameter of the earth sphere was made ten times larger than the real size. The system then was constructed with “Layout” method in graph_objects module by applying the sizes of sun and earth in “spheres” function and the distance between sun and earth into the “orbits” function. The generated system is shown as Figure 1 below:\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis1.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 1: Model of earth-solar system</center></p>\n                <p>\n                The goal of this part of the project was to visually illustrate why solar energy varies in the different time and location of the earth surface. To achieve this goal, the color of the earth was modified as gradient color, with brighter color on the side of the earth towards sun, and darker color on the side of the earth backwards to the sun. The surface color of the earth was set to be positively related to the coordinate of the point on the sphere. More specifically, the color of each pixel on the surface of the sphere was set to be proportional to “x0**2 - y0**2 - z0**2”, where x0, y0, and z0 were the coordinates to each point.\nAfter changing the surface color, the solar-earth system was shown in the Figure 2 below, where the surface of the earth was brighter in the side closer to the sun and vice versa. This model shows the basic principle of the solar energy application in different places of the earth: generally speaking, the equator area where can get most of the direct sunlight, has more sunlight intensity compared to polar areas of the earth, thus has more efficiency if applied infrastructures by solar energy industry.\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis2.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 2: Visualization about sunlight effect to earth</center></p>\n                <p>\n                <b>Part 2: Peak Sun Hour (PSH) Distribution in Different US States</b>\n                </p>\n                <p>\n                The second part of this project is to visualize the solar energy usage potential, defined as peak sun hour (PSH), of different state in the United States. Peak sun hour is a term related to the expected energy production of solar energy in one place. Since different states in the US are in different latitude with various topographic and climatic condition, the potential of solar energy usage is unevenly distributed. To be specific, since the majority states of the US are in the north hemisphere, south states and states with more sunny days would have higher PSHs. \n                </p>\n                <p>\n                The first step of this part was to import the data of state boundaries in the US. The geography information was retrieved through the Boundary Shapefile from United States Census Bureau in 2018. The Boundary Shapefile file was imported through “mpl_toolkits.basecamp” module in Python, which shows the boundary of states, as shown in Figure 3 below.\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis3.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 3: States boundary of US</center></p>\n                <p>\n                The next step was to implement the information of PSH into different colors on the boundary map. This step was achieved by the “Polygon” method in “matplotlib” method in Python. The PSH data were acquired from Renogy (Renogy, 2013). To match the PSH value with corresponding state by state name, the values of PSHs were shown in the “YlOrRd” colormap, with higher PSH having darker red color. Meanwhile, the state of Hawaii and Alaska were also move to the left bottom corner of the map to make the map in a proper scale. By setting the original boundary to be transparent and adding the corresponding color legend bar, the generated map was shown as Figure 4 below.\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis4.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 4: PSH map for each state</center></p>\n                <p>\n                To better illustrate the solar energy usage potential of the states, the map was divided into five different solar energy application level. This step was inspired by the application of drawing contours in UIUC CS519 class. The generated map in the last step was saved and each pixel of it was read and stored in a new list containing the RGB values. The RGB values were then converted into each unique value by “65536 * R + 256 * G + B”, which was later used as the parameter to draw a contour based on different color level with “contour” method in “matplotlib” module in Python. The contour was divided in five different level. The colormap used for this figure was “summer”, where the darker green region in the map indicates better potential and benefits for developing solar panel as a kind of “green energy” implementation.\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis5.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 5: Solar Energy Usage Potential Regions</center></p>\n                <p>\n                <b>Part 3: Best Solar Panel Usage Angle</b>\n                </p>\n                <p>\n                The last part of this project is to make a visualization for the solar intensity changing with different tilts and azimuths of the installation of the solar panel. As the rotation and revolution of earth, the sunlight intensity of one place is also changing, which is impacted not only by the latitude of the position, but also the sunlight irradiate angles, which are solar azimuth and solar elevation. Thus, the optimal position for a solar energy to maximize the sunlight intensity should be also changing with the sunlight irradiate angles. More specific, the equation used to decide the best solar panel working angles is:\n                </p>\n                <p>\n                <center><b>S_module=S_incident * [cos⁡(α) * sin⁡(β) * cos⁡(Ψ-Θ) + sin⁡(α) * cos⁡(β)]</b></center>\n                </p>\n                <p>\n                Where:\n                </p>\n                <p>\n                S_module:\tLight intensity on solar panel,\n                </p>\n                <p>\n                S_incident:\tSunlight intensity,\n                </p>\n                <p>\n                α:\t\tSun elevation angle,\n                </p>\n                <p>\n                Θ:\t\tSun azimuth angle,\n                </p>\n                <p>\n                β:\t\tSolar panel tilt angle,\n                </p>\n                <p>\n                Ψ:\t\tSolar panel azimuth angle (PVEducation, n.a.)\n                </p>\n                <p>\n                Among those parameters, α, Θ can be calculated through the latitude and time of the solar panel installation position, and S_incident can be measured or inferred from historical data. To simplify this equation, once the position and time are known, the light intensity on solar panel can be represented as a function related to solar panel tilt and azimuth, which is: S_module=f(β,Ψ). Take the sunlight data of Chicago in 11/29/2021 as an example, at 12:00pm, the solar azimuth will be 185.43 and the solar elevation will be 26.39, calculated by the “Solar Position Calculator” provided by NOAA (Cornwall et al, 2021). Using this information, the relationship between solar panel light intensity and installation angles can be depicted.\n                </p>\n                <p>\n                The first step of this part was to calculate the solar panel light intensity using the equation mentioned above in tilts between 0 to 90 degrees as well as azimuths between 90 to 270 degrees. The intensity as well as the corresponding tilt and azimuth are then drawn using the “Layout” method in the “graph_objects” module. The colormap used in this plotting was “Portland”, where the warmer color in the contour corresponds the higher solar intensity, which is the ideal angle the solar panel should face to acquire the higher efficiency. The contour was shown in the Figure 6 below. The idea of showing the solar panel installation angles instruction was acquired by the code from Alan Mitchell (Mitchell, 2017)\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis6.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 6: Solar panel light intensity in different tilts and azimuths</center></p>\n                <p>\n                To better illustrate the relationship between installation tilt and the expected energy produced, the contour was represented into 3d axis using “plotly.graph_objects” module. By converting to the 3d visualization, the impact of tilts and azimuths can be better shown for the user to get the best installation angles. The updated 3d plotting was shown in the Figure 7 below.\n                </p>\n                <img src=\"https://raw.githubusercontent.com/yuehaoshi/my-Files/main/WebPics/Solar%20Visualization%20Project/SolarVis7.png\" alt = 'Oops, this disappeared..' width = \"600\" align = \"center\"/>\n                <p><center>Figure 7: Solar panel light intensity in different tilts and azimuths in 3D</center></p>\n            </section>\n            <reference className={ styles.reference }>\n                <h3>References:</h3>\n                <p>\n                1. Cornwall, C. et al (2021, November 28). Solar Position Calculator, Retrieved November 28, 2021, from https://gml.noaa.gov/grad/solcalc/azel.html.\n                </p>\n                <p>\n                2. Kharwal, A. (2020, October 22). Visualize a solar system with python. Data Science | Machine Learning | Python | C++ | Coding | Programming | JavaScript. Retrieved November 15, 2021, from https://thecleverprogrammer.com/2020/10/07/visualize-a-solar-system-with-python/. \n                </p>\n                <p>\n                3. Renogy. (2013) Average Peak Sun Hours by State\n                </p> \n                <p>\n                4. Mitchell, A. (2017). Data and Sample code for Creating a Solar Contour Plot — misc-docs 1.0.0 documentation. Misc-Docs. https://miscellaneous-analysis-north-project-documentation.readthedocs.io/en/latest/solar-contour-plot.html\n                </p>\n                <p>\n                5. PVEducation, Arbitrary orientation and tilt. PVEducation. (n.d.). Retrieved November 29, 2021, from https://www.pveducation.org/pvcdrom/properties-of-sunlight/arbitrary-orientation-and-tilt.  \n                </p>\n            </reference>\n        </div>\n    </div>\n    }\n    if (id == 2) {\n        return <div className={ styles.wrap }>\n        <div className={ styles.box }>\n            <div className={ styles.title }>\n               <h1>Movie Recommendation System</h1>\n               <p>Sep 2021 to Dec 2021</p>\n            </div>\n            <section className={ styles.content }>\n            <p>\n            With the expansion of the online entertainment industry, video recommendation is becoming more and more important for video streaming platforms, through which users could get similar videos as the one they are currently viewing. The recommendation system can help users better decide which video to watch after current video based on their interest, which can give users a smooth experience for choosing and enjoying videos.\n                </p>\n                <p>\n                Developing a video recommendation system can not only apply the knowledge the team learned from UIUC CS412 course, including data preparation and data mining, but also provide us an opportunity to address the knowledge into a simulated real-world application, which meets our interest and anticipation about the project.\n                </p>\n                <p>\n                This project is designed to develop a movie and TV show recommendation system based on the “Netflix Movies and TV Shows” database, acquired from Kaggle. By exploring the relationship between different movies and shows, such as their directors, cast, genres and duration, the system will be able to provide recommendations for a chosen input.\n                </p>\n                <p>\n                The team first cleans several changes for the original data and generates one-hot columns for future use for the recommendation system process. After all the methods of data preprocessing, the dataset of movies has 29440 columns, and  the dataset of TV shows has 13599 columns. \n                </p>\n                <p>\n                Using the currently developed recommendation system, the team randomly chose some movies and found their recommendations by running the system. Here are some of the running results. Overall, the recommended result has some similarity with the tested data. For example, as shown in the picture below, by finding the recommending result for “Chhota Bheem and the Incan Adventure”, the system returns movies with the same director, cast and release_year as the test movie, which shows the recommending system could select the movies related to the test movie through thousands of records. However, there are still lots of things that need to be improved for our system in the next phase of the project.\n                </p>\n                <p>\n                Current developed recommendation system algorithm could return results similar to the given test, but there are still several problems, for example, sometimes it will return some unexpected results for movies with less famous directors or cast. The team will keep optimizing the recommending algorithm for our system. During the process of building our recommendation system, the team finds the previous recommendation distance algorithm with cosine similarity calculation does not drive the satisfied result, so the team changes the distance calculation by norm-2. In the later phase, the team will explore how and why changing distance calculation methods can impact the recommendation result, and will explore more calculation algorithms for comparison.\n                </p>\n                <p>\n                Another drawback in the current recommendation system is slow running time for each recommendation. The team thinks that the huge one-hot columns in processed databases slows the running process, so optimizing the system by reducing processed database size, or any other possible factor for optimizing is planned. Currently, the recommendation system ignores the information of title and description. The team plans to build a token corpus for each video and use NLP methods to get a reasonable distance between videos on the title and description columns. The distance is calculated using averaging weight. In the next step, the team will try to give different weight to each feature empirically. For example, the weight of title, description would be more than the weight of the released year.\n                </p>\n                <p>\n                During the work for this project, the team realizes that the data processing step is important for applications like a recommendation system, since the original data could have problems like missing data or having wrong data. Keeping too much imprecise data, such as “Null”s in some columns could cause the following work encountering difficulty in producing reasonable recommendations. At the same time, dropping all imperfect data directly at the first time would also waste some useful data that could be used for enriching the database.\n                </p>\n                <p>\n                In terms of the Netflix dataset, though it is one of the highest rated dataset among the Kaggle dataset library, the quality is quite poor. Over 20% of records contain missing values, which leaves little space for us to do feature engineering. Besides, the dataset is not large enough. The most frequent director only appears 19 times. There are huge amounts of values that appear only once, which increases the difficulty to calculate the distance between two samples. Moreover, there are mistakes during loading data to the dataset, for example, the duration is loaded to rating. These mistakes are hard to discover, because it is not numerical for which we can clip outliers. It is impossible to scan all the string values and see if they are reasonable.\n                </p>\n                <p>\n                Due to the page limitation for mid-term report, more details about data processing and recommendation system developing can be found in our code on google Colab platform.\n                </p>\n            </section>\n        </div>\n    </div>\n    }\n    if (id == 3) {\n        return <div className={ styles.wrap }>\n        <div className={ styles.box }>\n            <div className={ styles.title }>\n               <h1>Travel Destination Planner</h1>\n               <p>June 2021 to Aug 2021</p>\n            </div>\n            <section className={ styles.content }>\n                <p>\n                The project  “Where to go” is built with SQL, python flask, and other supporting language and technical components. The user interface on the website enables users to view and search suitable destinations with preferences and check the features of their predetermined destination. Those user-friendly functions and enjoyable user experience are realized by our design of SQL queries, comprehensively searching for the raw data, carefully filtering and logically merging databases, innovative design of UI, and advanced SQL functions. For each aspect, we will illustrate it thoroughly in the following sections.\n                </p>\n                <p>\n                The tourism industry has entered the rising trend with the pandemic trend going weaker and the increasing vaccine-taking rate. Research conducted by Hong Kong City University shows that the world's travel destinations are focused on only 39 cities and many participants expressed their difficult time in choosing destinations and ended up randomly choosing a famous city. To solve this problem, we help people to combine their preferences and minimize the range of potential choices. With entering the preference via our website, the potential cities meeting certain requirements are shown so that users are equipped with a helpful tool to make a meaningful decision.\n                </p>\n                <p>\n                The features include Accommodations, Environments, Cuisine, Attractions of a city together with its own characteristics. The point we’d like to explain further is the importance of the ‘population’ feature in our database. According to statistical facts of normal distribution and Covid-19 infection rate model by John Hopkins, the rate is positively related to population size and density. Hence, we provide this attribute for users to make decisions based on their attitudes toward COVID-19.\n                </p>\n                <p>\n                As stated previously, the goal of the “Where To Go” application is to provide users a platform where they can look for their travel destination with their own selected preference. Like most recommendation websites, the website starts with a table listing the most popular travel cities in the world along with their location, population, country, etc. Below the table, user exploration space (e.g., search bar) and other ideas/ inspiration for users’ reference can be found. For example, for users who are in love with nature, there is a one-click button that recommends the tropical cities where attractions with animals can be found. Aside from this, through a one-click button, the users can have access to the accommodation conditions of each city in terms of ratings, WIFI availability, etc. \n                </p>\n                <p>\n                Specific features include creating, read, update and delete in our application. Over the city table, users can add their cities to the table if not listed or delete the cities which are not their cakes. A special feature involved in our application is that users can update the city population over the table if any out-of-dated data is found. However,  an attribute that identifies the validation of the population is also provided. With this feature, we would like to improve our database by using up-to-date information from the user end without losing any credibility. The search/ read function is realized through a search bar where users can search for cities and get city information. Other features including travel ideas, evaluation of local accommodations, etc. can also be found.\n                </p>\n            </section>\n        </div>\n    </div>\n    }\n    else {\n        return <div className={ styles.wrap }>\n        <div className={ styles.box }>\n            <div className={ styles.title }>\n               <h1>More is comming...</h1>\n               <p>Some day in the future :D</p>\n               <p>Have a nice day!🌻</p>\n            </div>\n            <section className={ styles.content }>\n            </section>\n        </div>\n    </div>\n    }\n}","\nimport styles from './App.module.scss';\nimport { Routes, Route, Link, useLocation } from \"react-router-dom\";\nimport HomePage from './HomePage'\nimport WorkPage from './WorkPage'\nimport LifePage from './LifePage'\nimport GamePage from './GamePage'\nimport WorkPageDetail from './WorkPageDetail'\n\nfunction App() {\n  let location = useLocation();\n  return (\n    <div className= {styles.App}>\n\n      {/* header */}\n      <header className = {styles.header}>\n          <div className = {styles.box}>\n            <Link to = '/myweb'><div className = {styles.boxleft}>Yuehao's Room</div></Link>\n            <div className = {styles.boxright}>\n              <Link to = '/myweb'><p className = {location.pathname===\"/myweb\" ? styles.selected : null}>HOME</p></Link>\n              <Link to = '/works'><p className = {(location.pathname===\"/works\" || location.pathname===\"/works/1\" || location.pathname===\"/works/2\" || location.pathname===\"/works/3\" || location.pathname===\"/works/4\") ? styles.selected : null}>WORKS</p></Link>\n              <Link to = '/life'><p className = {location.pathname===\"/life\" ? styles.selected : null}>LIFE</p></Link>\n              <Link to = '/games'><p className = {location.pathname===\"/games\" ? styles.selected : null}>GAMES</p></Link>\n            </div>\n          </div>\n        </header>\n\n        {/* Contents */}\n        <section className = {styles.content}>\n          <Routes>\n            <Route path = '/myweb' element = { <HomePage /> } />\n            <Route path = '/works' element = { <WorkPage /> } />\n            <Route path = '/life' element = { <LifePage /> } />\n            <Route path = '/games' element = { <GamePage /> } />\n            <Route path = '/works/:id' element = { <WorkPageDetail/>} />\n          </Routes>\n        </section>\n\n        {/* Footer */}\n        <footer className = {styles.footer}>\n          <p>© <b>2021 Yuehao Shi</b></p>\n          <p>Handmade with</p>\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './pages//App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}